import cx_Oracle
import pandas as pd

from collections import defaultdict
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier


# SQL Script For Training/Building Model
querystring_train = """
SELECT * FROM(
SELECT

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
RETENTION.OPTY_STATUS,
RETENTION.ITEM_QUANTITY,
RETENTION.PRICE_NEGOTIATED,
IB.BILL_TO_CUST_ACCOUNT_ID ERP_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
PARTY.PARTY_SITE_ID PARTY_SITE_ID_VALIDATION,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID SFDC_ID,
ORG.SIC_CODE,
ACCT.ACCOUNT_NAME,
ACCT.SALES_CHANNEL_CODE,
LINE_COUNT.INSTANCE_COUNT,
DAY.MCAL_PER_NAME_QTR START_DATE,
DAY2.MCAL_PER_NAME_QTR EXPIRATION_DATE,
(DAY2.MCAL_YEAR*4 + DAY2.MCAL_QTR) - (DAY.MCAL_YEAR*4 + DAY.MCAL_QTR) CONTRACT_LENGTH,
DAY4.MCAL_PER_NAME_QTR NXT_EXPIRATION_DATE,
ITEM.INVENTORY_ITEM_ID,
IB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID_VALIDATION,
ITEM.PR_LEVEL3 PRODUCT,
BP_LKP.BP BUYING_PROGRAM,
PARTY.SUB_REGION,
KEY_CUST_FLAG.FLAG KEY_CUST_FLAG,
AGE.AGE,
LOST_CONTRACTS.CUMULATIVE NUM_LOST_INSTANCES,
NUM_INSTANCES_OWNED.CUMULATIVE TOTAL_INSTANCES_OWNED,
RETENTION.CONTRACT_LINE_END_DATE,
RETENTION.CONTRACT_LINE_STATUS_CODE,
RETENTION.NXT_CONTRACT_LN_END_DATE,
RETENTION.NXT_CONTRACT_LN_STATUS_CODE,
CASEX.PAST_CASE_COUNT,
CASEY.PAST_HIGH_SEVERITY_CASE_COUNT,
CASEZ.PAST_ESCALATION_COUNT,
SFDC_OPTY.OPTY_AMT,
PRICE.PCENT,
RENEWAL_COUNT.CUMULATIVE NUM_CONTRACTS
--CUSTOMER_AGE.CUST_AGE

FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION, --retention data
OBAW_READ.WC_INSTALL_BASE_D IB, --install base data
OBAW_READ.WC_PARTY_SITE_D PARTY, --site table
OBAW_READ.WC_CUSTOMER_ACCOUNT_D ACCT, --acct table

(
SELECT CONTRACT_ID, COUNT(DISTINCT INSTANCE_ID) INSTANCE_COUNT FROM OBAW_READ.WC_IBSC_RETENTION_F GROUP BY CONTRACT_ID
) LINE_COUNT, --how many instances

OBAW_READ.WC_DAY_D DAY, --start date

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY2, --end date

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY3, --sysdate to subset contracts that expired one qtr back

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY4, --nxt expiration

OBAW_READ.WC_ITEM_D ITEM, --item description

(
SELECT * FROM OBAW_READ.WC_PARTY_SITE_D
) SITE, --party site description

(
SELECT CUSTOMER_ACCOUNT_ID, ACCOUNT_NAME, 1 FLAG FROM OBAW_READ.WC_CUSTOMER_ACCOUNT_D WHERE ACCOUNT_NAME LIKE '%INGRAM%MICRO%' OR ACCOUNT_NAME LIKE '%TECH%DATA%'
) KEY_CUST_FLAG,

(
SELECT RETENTION2.INSTANCE_ID, RETENTION2.CONTRACT_LINE_END_DATE, MIN(RETENTION3.CONTRACT_LINE_START_DATE), (DAY3.MCAL_PER_NAME_YEAR*4 + DAY3.MCAL_QTR) - MIN(DAY4.MCAL_PER_NAME_YEAR*4 + DAY4.MCAL_QTR) AGE
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION2,
(SELECT * FROM OBAW_READ.WC_IBSC_RETENTION_F) RETENTION3,
OBAW_READ.WC_DAY_D DAY3,
(SELECT * FROM OBAW_READ.WC_DAY_D) DAY4
WHERE
RETENTION2.INSTANCE_ID = RETENTION3.INSTANCE_ID (+)
AND RETENTION2.CONTRACT_LINE_END_DATE = DAY3.DAY_DT (+)
AND RETENTION3.CONTRACT_LINE_START_DATE = DAY4.DAY_DT (+)
GROUP BY
RETENTION2.INSTANCE_ID,
RETENTION2.CONTRACT_LINE_END_DATE,
(DAY3.MCAL_PER_NAME_YEAR*4 + DAY3.MCAL_QTR)
) AGE,

(
select INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID, INSTANCE_OWNED.CONTRACT_LINE_END_DATE, COUNTER,
       SUM(INSTANCE_OWNED.COUNTER) over (partition by INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID order by INSTANCE_OWNED.CONTRACT_LINE_END_DATE) as cumulative
from
(
SELECT IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.CONTRACT_LINE_END_DATE, COUNT(RETENTION.INSTANCE_ID) COUNTER FROM
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_IBSC_RETENTION_F RETENTION
WHERE
RETENTION.OPTY_STATUS = 'LOST'
AND
IB.INSTANCE_ID = RETENTION.INSTANCE_ID
GROUP BY IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.CONTRACT_LINE_END_DATE
) INSTANCE_OWNED
) LOST_CONTRACTS,

(select INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID, INSTANCE_OWNED.CONTRACT_LINE_END_DATE, COUNTER,
       SUM(INSTANCE_OWNED.COUNTER) over (partition by INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID order by INSTANCE_OWNED.CONTRACT_LINE_END_DATE) as cumulative
from
(
SELECT IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.CONTRACT_LINE_END_DATE, COUNT(RETENTION.INSTANCE_ID) COUNTER FROM
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_IBSC_RETENTION_F RETENTION
WHERE
IB.INSTANCE_ID = RETENTION.INSTANCE_ID
GROUP BY IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.CONTRACT_LINE_END_DATE
) INSTANCE_OWNED) NUM_INSTANCES_OWNED,

(SELECT * FROM(
SELECT RETENTION.CONTRACT_ID, COUNT(DISTINCT IB.BILL_TO_CUST_ACCOUNT_ID) B
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB
WHERE
RETENTION.INSTANCE_ID = IB.INSTANCE_ID
GROUP BY
RETENTION.CONTRACT_ID
)
WHERE B <= 1) ERP_REPEAT,

(SELECT * FROM
(
SELECT INSTANCE_ID, COUNT(DISTINCT SFDC_ID) CA FROM(
SELECT

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID SFDC_ID

FROM
OBAW_READ.WC_INSTALL_BASE_D IB, --install base data
OBAW_READ.WC_IBSC_RETENTION_F RETENTION, --retention data
DVTA13_DW.W_PARTY_ORG_D ORG, --SFDC related data
OBAW_READ.WC_PARTY_SITE_D SITE --SFDC related data

WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = SITE.PARTY_SITE_ID (+)
AND SITE.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)

GROUP BY
RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID)
GROUP BY INSTANCE_ID
ORDER BY CA DESC)
WHERE CA <= 1) SFDC_CONTINUITY,

DVTA13_DW.W_PARTY_ORG_D ORG,

(
SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE, MAX(CASE2.CUMULATIVE) PAST_CASE_COUNT
FROM
(
select CASES.ACCOUNTID, CASES.CLOSEDDATE, COUNT(CASES.ACCOUNTID) over (partition by CASES.ACCOUNTID order by CASES.CLOSEDDATE) as cumulative
from STAGE_SFDC.CASEX CASES
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.CONTRACT_LINE_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSEDDATE <= JUNK.CONTRACT_LINE_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE) CASEX,

(
SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE, MAX(CASE2.CUMULATIVE) PAST_HIGH_SEVERITY_CASE_COUNT
FROM
(
select CASES.ACCOUNTID, CASES.CLOSEDDATE, COUNT(CASES.ACCOUNTID) over (partition by CASES.ACCOUNTID order by CASES.CLOSEDDATE) as cumulative
from STAGE_SFDC.CASEX CASES
WHERE
CASES.SEVERITY_NUMERIC__C = 4
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.CONTRACT_LINE_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSEDDATE <= JUNK.CONTRACT_LINE_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE
) CASEY,

(SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE, MAX(CASE2.CUMULATIVE) PAST_ESCALATION_COUNT
FROM
(
select CASES.ACCOUNTID, ESCALATIONS.CLOSED_DATE_TIME__C,
       COUNT(ESCALATIONS.CASE__C) over (partition by CASES.ACCOUNTID order by ESCALATIONS.CLOSED_DATE_TIME__C) as cumulative
from
STAGE_SFDC.CASEX CASES,
STAGE_SFDC.NGSC_MANAGER_ESCALATION__C ESCALATIONS
WHERE
CASES.ID = ESCALATIONS.CASE__C
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.CONTRACT_LINE_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSED_DATE_TIME__C <= JUNK.CONTRACT_LINE_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.CONTRACT_LINE_END_DATE) CASEZ,

(select
sum(opty.doc_revn) as opty_amt,
acct.integration_id as ACCOUNT_ID,
acct.x_cdh_id as x_cdh_id
from
obaw_read.w_revn_f opty,
dvta13_dw.w_party_org_d acct
where
opty.PR_CUSTOMER_WID = acct.row_wid
group by
acct.integration_id,
acct.x_cdh_id
) SFDC_OPTY,


(
SELECT * FROM(
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'GOV' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%GOV%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'ACD' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%ACD%' OR PARTY.CUST_SEGMENT LIKE '%ACA%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'CORPORATE' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%CORP%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'LOYALTY' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%LOY%'
)
)
) BP_LKP,

(
SELECT RETENTION2.INSTANCE_ID, RETENTION2.CONTRACT_LINE_END_DATE, RETENTION3.NXT_CONTRACT_LN_END_DATE, RETENTION3.PRICE_NEGOTIATED PRICE_BEFORE, RETENTION2.PRICE_NEGOTIATED PRICE_CURRENT, CASE WHEN RETENTION3.PRICE_NEGOTIATED > 0 THEN (RETENTION2.PRICE_NEGOTIATED - RETENTION3.PRICE_NEGOTIATED)/RETENTION3.PRICE_NEGOTIATED END PCENT, RETENTION2.OPTY_STATUS
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION2,
(SELECT * FROM OBAW_READ.WC_IBSC_RETENTION_F) RETENTION3
WHERE
RETENTION2.INSTANCE_ID = RETENTION3.INSTANCE_ID (+)
AND
RETENTION2.CONTRACT_LINE_END_DATE = RETENTION3.NXT_CONTRACT_LN_END_DATE(+)
) PRICE,

(select RETENTION.INSTANCE_ID, RETENTION.CONTRACT_LINE_END_DATE,
       COUNT(RETENTION.INSTANCE_ID) over (partition by RETENTION.INSTANCE_ID order by RETENTION.CONTRACT_LINE_END_DATE) as cumulative
from OBAW_READ.WC_IBSC_RETENTION_F RETENTION
) RENEWAL_COUNT


WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.CUST_SEGMENT = BP_LKP.BP
AND IB.BILL_TO_CUST_ACCOUNT_ID = ACCT.CUSTOMER_ACCOUNT_ID (+)
AND RETENTION.CONTRACT_ID = LINE_COUNT.CONTRACT_ID (+)
AND RETENTION.CONTRACT_LINE_START_DATE = DAY.DAY_DT (+)
AND RETENTION.CONTRACT_LINE_END_DATE = DAY2.DAY_DT (+)
AND IB.INVENTORY_ITEM_ID = ITEM.INVENTORY_ITEM_ID (+)
AND ITEM.ORGANIZATION_ID = 181
AND IB.INSTALL_SITE_ID = SITE.PARTY_SITE_ID (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = KEY_CUST_FLAG.CUSTOMER_ACCOUNT_ID (+)
AND RETENTION.INSTANCE_ID = AGE.INSTANCE_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = AGE.CONTRACT_LINE_END_DATE (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = LOST_CONTRACTS.BILL_TO_CUST_ACCOUNT_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = LOST_CONTRACTS.CONTRACT_LINE_END_DATE (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = NUM_INSTANCES_OWNED.BILL_TO_CUST_ACCOUNT_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = NUM_INSTANCES_OWNED.CONTRACT_LINE_END_DATE (+)
AND RETENTION.CONTRACT_ID = ERP_REPEAT.CONTRACT_ID
AND RETENTION.INSTANCE_ID = SFDC_CONTINUITY.INSTANCE_ID
AND SITE.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
AND SITE.PARTY_SITE_NUMBER = SFDC_OPTY.X_CDH_ID (+)

AND ORG.INTEGRATION_ID = CASEX.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEX.INSTANCE_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = CASEX.CONTRACT_LINE_END_DATE (+)
AND ORG.INTEGRATION_ID = CASEY.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEY.INSTANCE_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = CASEY.CONTRACT_LINE_END_DATE (+)
AND ORG.INTEGRATION_ID = CASEZ.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEZ.INSTANCE_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = CASEZ.CONTRACT_LINE_END_DATE (+)

AND RETENTION.INSTANCE_ID = PRICE.INSTANCE_ID
AND RETENTION.CONTRACT_LINE_END_DATE = PRICE.CONTRACT_LINE_END_DATE (+)
AND RETENTION.INSTANCE_ID = RENEWAL_COUNT.INSTANCE_ID (+)
AND RETENTION.CONTRACT_LINE_END_DATE = RENEWAL_COUNT.CONTRACT_LINE_END_DATE (+)
--AND IB.BILL_TO_CUST_ACCOUNT_ID = CUSTOMER_AGE.BILL_TO_CUST_ACCOUNT_ID (+)

AND RETENTION.NXT_CONTRACT_LN_END_DATE = DAY4.DAY_DT (+)

AND TRUNC(SYSDATE) = DAY3.DAY_DT (+)
AND DAY2.MCAL_YEAR*4 + DAY2.MCAL_QTR  < DAY3.MCAL_YEAR*4 + DAY3.MCAL_QTR
AND RETENTION.CONTRACT_LINE_END_DATE >=  '01-JAN-16'

GROUP BY

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
RETENTION.OPTY_STATUS,
RETENTION.ITEM_QUANTITY,
RETENTION.PRICE_NEGOTIATED,
IB.BILL_TO_CUST_ACCOUNT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
ORG.INTEGRATION_ID,
IB.INSTALL_SITE_ID,
PARTY.PARTY_SITE_ID,
SITE.PARTY_SITE_ID,
ORG.SIC_CODE,
ACCT.ACCOUNT_NAME,
ACCT.SALES_CHANNEL_CODE,
LINE_COUNT.INSTANCE_COUNT,
DAY.MCAL_PER_NAME_QTR,
DAY2.MCAL_PER_NAME_QTR,
(DAY2.MCAL_YEAR*4 + DAY2.MCAL_QTR) - (DAY.MCAL_YEAR*4 + DAY.MCAL_QTR),
DAY4.MCAL_PER_NAME_QTR,
ITEM.INVENTORY_ITEM_ID,
IB.INVENTORY_ITEM_ID,
ITEM.PR_LEVEL3,
BP_LKP.BP,
PARTY.SUB_REGION,
KEY_CUST_FLAG.FLAG,
AGE.AGE,
LOST_CONTRACTS.CUMULATIVE,
NUM_INSTANCES_OWNED.CUMULATIVE,
RETENTION.CONTRACT_LINE_END_DATE,
RETENTION.CONTRACT_LINE_STATUS_CODE,
RETENTION.NXT_CONTRACT_LN_END_DATE,
RETENTION.NXT_CONTRACT_LN_STATUS_CODE,
CASEX.PAST_CASE_COUNT,
CASEY.PAST_HIGH_SEVERITY_CASE_COUNT,
CASEZ.PAST_ESCALATION_COUNT,
SFDC_OPTY.OPTY_AMT,
PRICE.PCENT,
RENEWAL_COUNT.CUMULATIVE
--CUSTOMER_AGE.CUST_AGE
)"""

# SQL Script to Ingest Instances/Contracts for Churn Prediction
querystring_pred = '''
SELECT * FROM(
SELECT

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
RETENTION.OPTY_STATUS,
RETENTION.NXT_ITEM_QUANTITY ITEM_QUANTITY,
RETENTION.NXT_PRICE_NEGOTIATED PRICE_NEGOTIATED,
IB.BILL_TO_CUST_ACCOUNT_ID ERP_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
PARTY.PARTY_SITE_ID PARTY_SITE_ID_VALIDATION,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID SFDC_ID,
ORG.SIC_CODE,
ACCT.ACCOUNT_NAME,
ACCT.SALES_CHANNEL_CODE,
LINE_COUNT.INSTANCE_COUNT,
DAY.MCAL_PER_NAME_QTR START_DATE,
DAY2.MCAL_PER_NAME_QTR EXPIRATION_DATE,
(DAY2.MCAL_YEAR*4 + DAY2.MCAL_QTR) - (DAY.MCAL_YEAR*4 + DAY.MCAL_QTR) CONTRACT_LENGTH,
DAY4.MCAL_PER_NAME_QTR NXT_EXPIRATION_DATE,
ITEM.INVENTORY_ITEM_ID,
IB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID_VALIDATION,
ITEM.PR_LEVEL3 PRODUCT,
BP_LKP.BP BUYING_PROGRAM,
PARTY.SUB_REGION,
KEY_CUST_FLAG.FLAG KEY_CUST_FLAG,
AGE.AGE,
LOST_CONTRACTS.CUMULATIVE NUM_LOST_INSTANCES,
NUM_INSTANCES_OWNED.CUMULATIVE TOTAL_INSTANCES_OWNED,
RETENTION.CONTRACT_LINE_END_DATE,
RETENTION.CONTRACT_LINE_STATUS_CODE,
RETENTION.NXT_CONTRACT_LN_END_DATE,
RETENTION.NXT_CONTRACT_LN_STATUS_CODE,
CASEX.PAST_CASE_COUNT,
CASEY.PAST_HIGH_SEVERITY_CASE_COUNT,
CASEZ.PAST_ESCALATION_COUNT,
SFDC_OPTY.OPTY_AMT,
PRICE.PCENT,
RENEWAL_COUNT.CUMULATIVE NUM_CONTRACTS

FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION, --retention data
OBAW_READ.WC_INSTALL_BASE_D IB, --install base data
OBAW_READ.WC_PARTY_SITE_D PARTY, --site table
OBAW_READ.WC_CUSTOMER_ACCOUNT_D ACCT, --acct table

(
SELECT CONTRACT_ID, COUNT(DISTINCT INSTANCE_ID) INSTANCE_COUNT FROM OBAW_READ.WC_IBSC_RETENTION_F GROUP BY CONTRACT_ID
) LINE_COUNT, --how many instances

OBAW_READ.WC_DAY_D DAY, --start date

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY2, --end date

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY3, --nxt expr date

(
SELECT * FROM OBAW_READ.WC_DAY_D
) DAY4, --qtr ahead

OBAW_READ.WC_ITEM_D ITEM, --item description

(
SELECT * FROM OBAW_READ.WC_PARTY_SITE_D
) SITE, --party site description

(
SELECT CUSTOMER_ACCOUNT_ID, ACCOUNT_NAME, 1 FLAG FROM OBAW_READ.WC_CUSTOMER_ACCOUNT_D WHERE ACCOUNT_NAME LIKE '%INGRAM%MICRO%' OR ACCOUNT_NAME LIKE '%TECH%DATA%'
) KEY_CUST_FLAG,

(
SELECT RETENTION2.INSTANCE_ID, RETENTION2.NXT_CONTRACT_LN_END_DATE, MIN(RETENTION3.CONTRACT_LINE_START_DATE), (DAY3.MCAL_PER_NAME_YEAR*4 + DAY3.MCAL_QTR) - MIN(DAY4.MCAL_PER_NAME_YEAR*4 + DAY4.MCAL_QTR) AGE
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION2,
(SELECT * FROM OBAW_READ.WC_IBSC_RETENTION_F) RETENTION3,
OBAW_READ.WC_DAY_D DAY3,
(SELECT * FROM OBAW_READ.WC_DAY_D) DAY4
WHERE
RETENTION2.INSTANCE_ID = RETENTION3.INSTANCE_ID (+)
AND RETENTION2.NXT_CONTRACT_LN_END_DATE = DAY3.DAY_DT (+)
AND RETENTION3.CONTRACT_LINE_START_DATE = DAY4.DAY_DT (+)
GROUP BY
RETENTION2.INSTANCE_ID,
RETENTION2.NXT_CONTRACT_LN_END_DATE,
(DAY3.MCAL_PER_NAME_YEAR*4 + DAY3.MCAL_QTR)
) AGE,

(
select INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID, INSTANCE_OWNED.NXT_CONTRACT_LN_END_DATE, COUNTER,
       SUM(INSTANCE_OWNED.COUNTER) over (partition by INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID order by INSTANCE_OWNED.NXT_CONTRACT_LN_END_DATE) as cumulative
from
(
SELECT IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.NXT_CONTRACT_LN_END_DATE, COUNT(RETENTION.INSTANCE_ID) COUNTER FROM
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_IBSC_RETENTION_F RETENTION
WHERE
RETENTION.OPTY_STATUS = 'LOST'
AND
IB.INSTANCE_ID = RETENTION.INSTANCE_ID
GROUP BY IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.NXT_CONTRACT_LN_END_DATE
) INSTANCE_OWNED
) LOST_CONTRACTS,

(select INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID, INSTANCE_OWNED.NXT_CONTRACT_LN_END_DATE, COUNTER,
       SUM(INSTANCE_OWNED.COUNTER) over (partition by INSTANCE_OWNED.BILL_TO_CUST_ACCOUNT_ID order by INSTANCE_OWNED.NXT_CONTRACT_LN_END_DATE) as cumulative
from
(
SELECT IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.NXT_CONTRACT_LN_END_DATE, COUNT(RETENTION.INSTANCE_ID) COUNTER FROM
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_IBSC_RETENTION_F RETENTION
WHERE
IB.INSTANCE_ID = RETENTION.INSTANCE_ID
GROUP BY IB.BILL_TO_CUST_ACCOUNT_ID, RETENTION.NXT_CONTRACT_LN_END_DATE
) INSTANCE_OWNED) NUM_INSTANCES_OWNED,

(SELECT * FROM(
SELECT RETENTION.CONTRACT_ID, COUNT(DISTINCT IB.BILL_TO_CUST_ACCOUNT_ID) B
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB
WHERE
RETENTION.INSTANCE_ID = IB.INSTANCE_ID
GROUP BY
RETENTION.CONTRACT_ID
)
WHERE B <= 1) ERP_REPEAT,

(SELECT * FROM
(
SELECT INSTANCE_ID, COUNT(DISTINCT SFDC_ID) CA FROM(
SELECT

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID SFDC_ID

FROM
OBAW_READ.WC_INSTALL_BASE_D IB, --install base data
OBAW_READ.WC_IBSC_RETENTION_F RETENTION, --retention data
DVTA13_DW.W_PARTY_ORG_D ORG, --SFDC related data
OBAW_READ.WC_PARTY_SITE_D SITE --SFDC related data

WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = SITE.PARTY_SITE_ID (+)
AND SITE.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)

GROUP BY
RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID)
GROUP BY INSTANCE_ID
ORDER BY CA DESC)
WHERE CA <= 1) SFDC_CONTINUITY,

DVTA13_DW.W_PARTY_ORG_D ORG,

(
SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE, MAX(CASE2.CUMULATIVE) PAST_CASE_COUNT
FROM
(
select CASES.ACCOUNTID, CASES.CLOSEDDATE, COUNT(CASES.ACCOUNTID) over (partition by CASES.ACCOUNTID order by CASES.CLOSEDDATE) as cumulative
from STAGE_SFDC.CASEX CASES
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.NXT_CONTRACT_LN_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSEDDATE <= JUNK.NXT_CONTRACT_LN_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE) CASEX,

(
SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE, MAX(CASE2.CUMULATIVE) PAST_HIGH_SEVERITY_CASE_COUNT
FROM
(
select CASES.ACCOUNTID, CASES.CLOSEDDATE, COUNT(CASES.ACCOUNTID) over (partition by CASES.ACCOUNTID order by CASES.CLOSEDDATE) as cumulative
from STAGE_SFDC.CASEX CASES
WHERE
CASES.SEVERITY_NUMERIC__C = 4
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.NXT_CONTRACT_LN_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSEDDATE <= JUNK.NXT_CONTRACT_LN_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE
) CASEY,

(SELECT JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE, MAX(CASE2.CUMULATIVE) PAST_ESCALATION_COUNT
FROM
(
select CASES.ACCOUNTID, ESCALATIONS.CLOSED_DATE_TIME__C,
       COUNT(ESCALATIONS.CASE__C) over (partition by CASES.ACCOUNTID order by ESCALATIONS.CLOSED_DATE_TIME__C) as cumulative
from
STAGE_SFDC.CASEX CASES,
STAGE_SFDC.NGSC_MANAGER_ESCALATION__C ESCALATIONS
WHERE
CASES.ID = ESCALATIONS.CASE__C
) CASE2,
(
SELECT RETENTION.INSTANCE_ID, RETENTION.NXT_CONTRACT_LN_END_DATE, IB.INSTALL_SITE_ID, PARTY.PARTY_SITE_NUMBER, ORG.INTEGRATION_ID
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION,
OBAW_READ.WC_INSTALL_BASE_D IB,
OBAW_READ.WC_PARTY_SITE_D PARTY,
DVTA13_DW.W_PARTY_ORG_D ORG
WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
)JUNK
WHERE CASE2.CLOSED_DATE_TIME__C <= JUNK.NXT_CONTRACT_LN_END_DATE
AND
CASE2.ACCOUNTID = JUNK.INTEGRATION_ID
GROUP BY
JUNK.INSTANCE_ID, CASE2.ACCOUNTID, JUNK.NXT_CONTRACT_LN_END_DATE) CASEZ,

(select
sum(opty.doc_revn) as opty_amt,
acct.integration_id as ACCOUNT_ID,
acct.x_cdh_id as x_cdh_id
from
obaw_read.w_revn_f opty,
dvta13_dw.w_party_org_d acct
where
opty.PR_CUSTOMER_WID = acct.row_wid
group by
acct.integration_id,
acct.x_cdh_id
) SFDC_OPTY,


(
SELECT * FROM(
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'GOV' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%GOV%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'ACD' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%ACD%' OR PARTY.CUST_SEGMENT LIKE '%ACA%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'CORPORATE' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%CORP%'
)
UNION ALL
(
SELECT DISTINCT(PARTY.CUST_SEGMENT), 'LOYALTY' BP
FROM
OBAW_READ.WC_PARTY_SITE_D PARTY
WHERE
UPPER(PARTY.CUST_SEGMENT) LIKE '%LOY%'
)
)
) BP_LKP,

(
SELECT RETENTION2.INSTANCE_ID, RETENTION2.CONTRACT_LINE_END_DATE, RETENTION2.NXT_CONTRACT_LN_END_DATE, RETENTION2.PRICE_NEGOTIATED PRICE_BEFORE, RETENTION2.NXT_PRICE_NEGOTIATED PRICE_CURRENT, CASE WHEN RETENTION2.PRICE_NEGOTIATED > 0 THEN (RETENTION2.NXT_PRICE_NEGOTIATED - RETENTION2.PRICE_NEGOTIATED)/RETENTION2.PRICE_NEGOTIATED END PCENT
FROM
OBAW_READ.WC_IBSC_RETENTION_F RETENTION2
WHERE
RETENTION2.OPTY_STATUS = 'RENEWED'
) PRICE,

(select RETENTION.INSTANCE_ID, RETENTION.NXT_CONTRACT_LN_END_DATE,
       COUNT(RETENTION.INSTANCE_ID) over (partition by RETENTION.INSTANCE_ID order by RETENTION.NXT_CONTRACT_LN_END_DATE) + 1 as cumulative
from OBAW_READ.WC_IBSC_RETENTION_F RETENTION
) RENEWAL_COUNT



WHERE
    RETENTION.INSTANCE_ID = IB.INSTANCE_ID
AND IB.INSTALL_SITE_ID = PARTY.PARTY_SITE_ID (+)
AND PARTY.CUST_SEGMENT = BP_LKP.BP
AND IB.BILL_TO_CUST_ACCOUNT_ID = ACCT.CUSTOMER_ACCOUNT_ID (+)
AND RETENTION.CONTRACT_ID = LINE_COUNT.CONTRACT_ID (+)
AND RETENTION.CONTRACT_LINE_START_DATE = DAY.DAY_DT (+)
AND RETENTION.CONTRACT_LINE_END_DATE = DAY2.DAY_DT (+)
AND IB.INVENTORY_ITEM_ID = ITEM.INVENTORY_ITEM_ID (+)
AND ITEM.ORGANIZATION_ID = 181
AND IB.INSTALL_SITE_ID = SITE.PARTY_SITE_ID (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = KEY_CUST_FLAG.CUSTOMER_ACCOUNT_ID (+)
AND RETENTION.INSTANCE_ID = AGE.INSTANCE_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = AGE.NXT_CONTRACT_LN_END_DATE (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = LOST_CONTRACTS.BILL_TO_CUST_ACCOUNT_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = LOST_CONTRACTS.NXT_CONTRACT_LN_END_DATE (+)
AND IB.BILL_TO_CUST_ACCOUNT_ID = NUM_INSTANCES_OWNED.BILL_TO_CUST_ACCOUNT_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = NUM_INSTANCES_OWNED.NXT_CONTRACT_LN_END_DATE (+)
AND RETENTION.CONTRACT_ID = ERP_REPEAT.CONTRACT_ID
AND RETENTION.INSTANCE_ID = SFDC_CONTINUITY.INSTANCE_ID
AND SITE.PARTY_SITE_NUMBER = ORG.X_CDH_ID (+)
AND SITE.PARTY_SITE_NUMBER = SFDC_OPTY.X_CDH_ID (+)

AND ORG.INTEGRATION_ID = CASEX.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEX.INSTANCE_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = CASEX.NXT_CONTRACT_LN_END_DATE (+)
AND ORG.INTEGRATION_ID = CASEY.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEY.INSTANCE_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = CASEY.NXT_CONTRACT_LN_END_DATE (+)
AND ORG.INTEGRATION_ID = CASEZ.ACCOUNTID (+)
AND RETENTION.INSTANCE_ID = CASEZ.INSTANCE_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = CASEZ.NXT_CONTRACT_LN_END_DATE (+)

AND RETENTION.INSTANCE_ID = PRICE.INSTANCE_ID
AND RETENTION.NXT_CONTRACT_LN_END_DATE = PRICE.NXT_CONTRACT_LN_END_DATE (+)
AND RETENTION.INSTANCE_ID = RENEWAL_COUNT.INSTANCE_ID (+)
AND RETENTION.NXT_CONTRACT_LN_END_DATE = RENEWAL_COUNT.NXT_CONTRACT_LN_END_DATE (+)

AND TRUNC(SYSDATE) = DAY3.DAY_DT
AND RETENTION.NXT_CONTRACT_LN_END_DATE = DAY4.DAY_DT
AND DAY3.MCAL_YEAR*4 + DAY3.MCAL_QTR + 1 = DAY4.MCAL_YEAR*4 + DAY4.MCAL_QTR
AND RETENTION.OPTY_STATUS = 'RENEWED'

GROUP BY

RETENTION.INSTANCE_ID,
RETENTION.CONTRACT_ID,
RETENTION.OPTY_STATUS,
RETENTION.NXT_ITEM_QUANTITY,
RETENTION.NXT_PRICE_NEGOTIATED,
IB.BILL_TO_CUST_ACCOUNT_ID,
SITE.PARTY_SITE_NUMBER,
ORG.X_CDH_ID,
SITE.PARTY_SITE_ID,
PARTY.PARTY_SITE_ID,
IB.INSTALL_SITE_ID,
ORG.INTEGRATION_ID,
ORG.SIC_CODE,
ACCT.ACCOUNT_NAME,
ACCT.SALES_CHANNEL_CODE,
LINE_COUNT.INSTANCE_COUNT,
DAY.MCAL_PER_NAME_QTR,
DAY2.MCAL_PER_NAME_QTR,
(DAY2.MCAL_YEAR*4 + DAY2.MCAL_QTR) - (DAY.MCAL_YEAR*4 + DAY.MCAL_QTR),
DAY4.MCAL_PER_NAME_QTR,
ITEM.INVENTORY_ITEM_ID,
IB.INVENTORY_ITEM_ID,
ITEM.PR_LEVEL3,
BP_LKP.BP,
PARTY.SUB_REGION,
KEY_CUST_FLAG.FLAG,
AGE.AGE,
LOST_CONTRACTS.CUMULATIVE,
NUM_INSTANCES_OWNED.CUMULATIVE,
RETENTION.CONTRACT_LINE_END_DATE,
RETENTION.CONTRACT_LINE_STATUS_CODE,
RETENTION.NXT_CONTRACT_LN_END_DATE,
RETENTION.NXT_CONTRACT_LN_STATUS_CODE,
CASEX.PAST_CASE_COUNT,
CASEY.PAST_HIGH_SEVERITY_CASE_COUNT,
CASEZ.PAST_ESCALATION_COUNT,
SFDC_OPTY.OPTY_AMT,
PRICE.PCENT,
RENEWAL_COUNT.CUMULATIVE
)
'''

# Connecting to Oracle DB
con = cx_Oracle.connect('VTAS_SLSFIN/a8tvzGVS@vmsodvtas011.ORACLEOUTSOURCING.COM:5010/DVTA13')
cur = con.cursor()
cur.arraysize = 1000

# Execute query to ingest data for training/building model
print "Executing query for training data..."
cur.execute(querystring_train)
res = cur.fetchall()
df_train = pd.DataFrame(res)
print "Number of records for training/building model:", df_train.shape[0]

# Execute query to ingest data for prediction
print "Executing query for test data..."
cur.execute(querystring_pred)
res = cur.fetchall()
df_pred = pd.DataFrame(res)
print "Number of records for prediction:", df_pred.shape[0]

# Label column names of dataframes (df_train and df_pred)
col_names =['INSTANCE_ID', 'CONTRACT_ID', 'OPTY_STATUS', 'ITEM_QUANTITY', 'PRICE_NEGOTIATED', 'ERP_ID',
            'PARTY_SITE_NUMBER', 'X_CDH_ID', 'PARTY_SITE_ID', 'PARTY_SITE_ID_VALIDATION', 'INSTALL_SITE_ID',
            'SFDC_ID', 'SIC_CODE', 'ACCOUNT_NAME', 'SALES_CHANNEL_CODE', 'INSTANCE_COUNT', 'START_DATE',
            'EXPIRATION_DATE', 'CONTRACT_LENGTH', 'NXT_EXPIRATION_DATE','INVENTORY_ITEM_ID',
            'INVENTORY_ITEM_ID_VALIDATION', 'PRODUCT', 'BUYING_PROGRAM', 'SUB_REGION', 'KEY_CUST_FLAG',
            'AGE', 'NUM_LOST_INSTANCES', 'TOTAL_INSTANCES_OWNED','CONTRACT_LINE_END_DATE',
            'CONTRACT_LINE_STATUS_CODE', 'NXT_CONTRACT_LN_END_DATE', 'NXT_CONTRACT_LN_STATUS_CODE',
            'PAST_CASE_COUNT', 'PAST_HIGH_SEVERITY_CASE_COUNT', 'PAST_ESCALATION_COUNT', 'OPTY_AMT',
            'PCENT', 'NUM_CONTRACTS']

df_train.columns = col_names
df_pred.columns = col_names

# Function to preprocess the dataframes
def preprocess_churn(df):
    df_preprocessed = df.copy()

    # Too many missing values to fill
    df_preprocessed.drop(['KEY_CUST_FLAG'], axis=1, inplace=True)

    # Drop Indentifier Columns
    df_preprocessed.drop(['ERP_ID', 'PARTY_SITE_NUMBER', 'X_CDH_ID', 'PARTY_SITE_ID','PARTY_SITE_ID_VALIDATION',
             'INSTALL_SITE_ID', 'SFDC_ID', 'INVENTORY_ITEM_ID', 'INVENTORY_ITEM_ID_VALIDATION'],
            axis=1, inplace=True)

    # Drop Unnecessary Columns: These are dropped for now since the expiration date has passed.
    df_preprocessed.drop(['CONTRACT_LINE_END_DATE','CONTRACT_LINE_STATUS_CODE',
                          'NXT_CONTRACT_LN_STATUS_CODE', 'NXT_EXPIRATION_DATE'],
            axis=1, inplace=True)

    # Fill numerical columns nan's with zeros
    df_preprocessed.PAST_CASE_COUNT.fillna(value=0, inplace=True)  # 80% missing values
    df_preprocessed.PAST_ESCALATION_COUNT.fillna(value=0, inplace=True)  # 80% missing values
    df_preprocessed.PAST_HIGH_SEVERITY_CASE_COUNT.fillna(value=0, inplace=True)  # 80% missing values
    df_preprocessed.OPTY_AMT.fillna(value=0, inplace=True)  # 41% missing values
    df_preprocessed.PCENT.fillna(value=0, inplace=True)  # 91% missing values
    df_preprocessed.NUM_LOST_INSTANCES.fillna(value=0, inplace=True)  # 41% missing values
    df_preprocessed.TOTAL_INSTANCES_OWNED.fillna(value=0, inplace=True)  # 91% missing values

    # Fill in with 'OTHER'
    df_preprocessed.SUB_REGION.fillna('OTHER', inplace=True)
    df_preprocessed.BUYING_PROGRAM.fillna('OTHER', inplace=True)

    # Fill in with 'NOT AVAILABLE'
    df_preprocessed.ACCOUNT_NAME.fillna('NOT AVAILABLE', inplace=True)
    df_preprocessed.SIC_CODE.fillna('NOT AVAILABLE', inplace=True)
    df_preprocessed.SALES_CHANNEL_CODE.fillna('NOT AVAILABLE', inplace=True)

    # Remove rows with * in ACCOUNT_NAME
    df_preprocessed = df_preprocessed[~df_preprocessed.ACCOUNT_NAME.str.startswith("*")]

    # Drop all rows with Missing Values
    df_preprocessed = df_preprocessed.dropna()

    # Remove year
    def remove_year(row):
        return row[5:]

    df_preprocessed['START_QTR'] = df_preprocessed.loc[:, 'START_DATE'].apply(remove_year)
    df_preprocessed['EXPIRATION_QTR'] = df_preprocessed.loc[:, 'EXPIRATION_DATE'].apply(remove_year)
    return df_preprocessed

print "Preprocessing data..."
df_train = preprocess_churn(df_train)
df_pred = preprocess_churn(df_pred)

# Building Label Encoder for Categorical Variables
unique_categories = {}
categorical_columns = ['SIC_CODE','ACCOUNT_NAME', 'SALES_CHANNEL_CODE',
                       'PRODUCT', 'BUYING_PROGRAM', 'SUB_REGION']
for category in categorical_columns:
    unique_categories[category] = sorted(set(list(df_train[category].unique()) + list(df_pred[category].unique())))

# Creating Categorical Dictionary for Tranformations
# Get all unique values of each categorical column
df_sc = pd.DataFrame({'SIC_CODE': unique_categories['SIC_CODE']})
df_an = pd.DataFrame({'ACCOUNT_NAME': unique_categories['ACCOUNT_NAME']})
df_scc = pd.DataFrame({'SALES_CHANNEL_CODE': unique_categories['SALES_CHANNEL_CODE']})
df_p = pd.DataFrame({'PRODUCT': unique_categories['PRODUCT']})
df_bp = pd.DataFrame({'BUYING_PROGRAM': unique_categories['BUYING_PROGRAM']})
df_sr = pd.DataFrame({'SUB_REGION': unique_categories['SUB_REGION']})
df_start = pd.DataFrame(
    {'START_QTR': sorted(set(list(df_train['START_QTR'].unique()) + list(df_pred['START_QTR'].unique())))})
df_end = pd.DataFrame({'EXPIRATION_QTR': sorted(set(list(df_train['EXPIRATION_QTR'].unique()) +
                                                    list(df_pred['EXPIRATION_QTR'].unique())))})

# Concatenate all unique values of each category
df_fit_transform = pd.concat([df_sc, df_an, df_scc, df_p, df_bp, df_sr, df_start, df_end])

# Fill in null values (Randomly chose a fill in value that exists in distinct list)
df_fit_transform.SIC_CODE.fillna('NOT AVAILABLE', inplace=True)
df_fit_transform.ACCOUNT_NAME.fillna('NOT AVAILABLE', inplace=True)
df_fit_transform.SALES_CHANNEL_CODE.fillna('NOT AVAILABLE', inplace=True)
df_fit_transform.BUYING_PROGRAM.fillna('OTHER', inplace=True)
df_fit_transform.PRODUCT.fillna('OTHER', inplace=True)
df_fit_transform.SUB_REGION.fillna('NOT AVAILABLE', inplace=True)
df_fit_transform.START_QTR.fillna('OTHER', inplace=True)
df_fit_transform.EXPIRATION_QTR.fillna('OTHER', inplace=True)

# Initiate the dictionary that holds the encoding functions
print "Building categorical dictionary for transformation..."
d_encoder = defaultdict(LabelEncoder)

# Encoding the variable
_ = df_fit_transform.apply(lambda x: d_encoder[x.name].fit_transform(x))

# Change Labels for 'OPTY_STATUS' (target variable)
def change_label(row):
    if row == 'RENEWED':
        return 0.0
    return 1.0

# Transforming, Encoding 'Opty_status'
df_train['OPTY_STATUS_ENC'] = df_train.OPTY_STATUS.apply(change_label)

# Defining categorical and numeric columns
categorical_cols = ['ACCOUNT_NAME', 'PRODUCT','BUYING_PROGRAM', 'SUB_REGION',
                    'SALES_CHANNEL_CODE', 'SIC_CODE', 'START_QTR','EXPIRATION_QTR']
categorical_cols_encoded = ['ACCOUNT_NAME_ENC', 'PRODUCT_ENC','BUYING_PROGRAM_ENC', 'SUB_REGION_ENC',
                            'SALES_CHANNEL_CODE_ENC', 'SIC_CODE_ENC', 'START_QTR_ENC','EXPIRATION_QTR_ENC']
numerical_cols = ['ITEM_QUANTITY', 'PRICE_NEGOTIATED', 'CONTRACT_LENGTH',
                  'AGE', 'NUM_LOST_INSTANCES', 'TOTAL_INSTANCES_OWNED',
                  'INSTANCE_COUNT', 'PAST_CASE_COUNT', 'PAST_HIGH_SEVERITY_CASE_COUNT',
                  'PAST_ESCALATION_COUNT', 'OPTY_AMT', 'PCENT']

# Transform categorical variables
df_train[categorical_cols_encoded]= df_train[categorical_cols].apply(lambda x: d_encoder[x.name].transform(x))

# Define X and y for training/building model
X = df_train[categorical_cols_encoded + numerical_cols]
y = df_train['OPTY_STATUS_ENC']

# Building Model using RandomForest
print "Building model..."
model = RandomForestClassifier(max_depth=None, n_estimators=500, max_features='log2', n_jobs=-1)
model.fit(X, y)

# PREDICTION
# Encode Categorical Variables
df_pred[categorical_cols_encoded]= df_pred[categorical_cols].apply(lambda x: d_encoder[x.name].transform(x))

# Define X for prediction
X_pred = df_pred[categorical_cols_encoded + numerical_cols]

# Make predictions and set threshold
print "Making predictions..."
threshold = 0.40
y_pred_proba = model.predict_proba(X_pred)[:, 1]

# OUTPUT
# Add new columns for final result: ['CHURN_PROBABILITY', 'PREDICTION']
df_pred['CHURN_PROBABILITY'] = y_pred_proba
df_results = df_pred.sort_values(['CHURN_PROBABILITY'], ascending=False)[['INSTANCE_ID',
                                                                          'CONTRACT_ID',
                                                                          'CHURN_PROBABILITY',
                                                                          'NXT_CONTRACT_LN_END_DATE']]

# Transform Pandas Dataframe to Oracle table
con2 = cx_Oracle.connect('VTAS_SLSFIN/a8tvzGVS@vmsodvtas011.ORACLEOUTSOURCING.COM:5010/DVTA13')
cur2 = con2.cursor()
query_delete = "DELETE FROM VTAS_SLSFIN.CHURN_SCORES"
cur2.execute(query_delete)
rows = [tuple(row) for row in df_results.values]
cur2.executemany('''INSERT into VTAS_SLSFIN.CHURN_SCORES(INSTANCE_ID,
                                             CONTRACT_ID,
                                             CHURN_PROBABILITY,
                                             NXT_CONTRACT_LN_END_DATE) values (:1, :2, :3, :4)''', rows)
con2.commit()
cur2.close()
